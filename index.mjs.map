{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isFunction from '@stdlib/assert-is-function';\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert-is-positive-integer';\nimport format from '@stdlib/string-format';\n\n\n// MAIN //\n\n/**\n* Transforms a function into a sequence of functions each accepting a single argument.\n*\n* @param {Function} fcn - function to curry\n* @param {PositiveInteger} [arity=fcn.length] - number of parameters\n* @param {*} [thisArg] - evaluation context\n* @throws {TypeError} first argument must be a function\n* @throws {TypeError} first argument must be a function having at least one parameter\n* @throws {TypeError} `arity` argument must be a positive integer\n* @returns {Function} curry function\n*\n* @example\n* function add( x, y ) {\n*     return x + y;\n* }\n*\n* var f = curry( add );\n*\n* var sum = f( 2 )( 3 );\n* // returns 5\n*/\nfunction curry( fcn, arity, thisArg ) {\n\tvar context;\n\tvar len;\n\tif ( !isFunction( fcn ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', fcn ) );\n\t}\n\tif ( arguments.length < 2 ) {\n\t\tlen = fcn.length;\n\t\tif ( !isPositiveInteger( len ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function having at least one parameter. Value: `%s`.', len ) );\n\t\t}\n\t} else if ( arguments.length > 2 ) {\n\t\tlen = arity;\n\t\tcontext = thisArg;\n\t\tif ( !isPositiveInteger( len ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Arity argument must be a positive integer. Value: `%s`.', len ) );\n\t\t}\n\t} else if ( isPositiveInteger( arity ) ) {\n\t\tlen = arity;\n\t} else {\n\t\tlen = fcn.length;\n\t\tif ( !isPositiveInteger( len ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function having at least one parameter. Value: `%s`.', len ) );\n\t\t}\n\t\tcontext = arity;\n\t}\n\treturn createCurried( [] );\n\n\t/**\n\t* Returns a curry function.\n\t*\n\t* @private\n\t* @param {Array} args - arguments\n\t* @returns {Function} curry function\n\t*/\n\tfunction createCurried( args ) {\n\t\treturn curried;\n\n\t\t/**\n\t\t* Curry function.\n\t\t*\n\t\t* @private\n\t\t* @param {*} v - curried function parameter\n\t\t* @returns {(Function|*)} partially applied curry function or curried function result\n\t\t*/\n\t\tfunction curried( v ) {\n\t\t\tvar cargs = args.slice();\n\t\t\tcargs.push( v );\n\t\t\tif ( cargs.length < len ) {\n\t\t\t\treturn createCurried( cargs );\n\t\t\t}\n\t\t\treturn fcn.apply( context, cargs );\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default curry;\n"],"names":["curry","fcn","arity","thisArg","context","len","isFunction","TypeError","format","arguments","length","isPositiveInteger","createCurried","args","v","cargs","slice","push","apply"],"mappings":";;ySAkDA,SAASA,EAAOC,EAAKC,EAAOC,GAC3B,IAAIC,EACAC,EACJ,IAAMC,EAAYL,GACjB,MAAM,IAAIM,UAAWC,EAAQ,oEAAqEP,IAEnG,GAAKQ,UAAUC,OAAS,GAEvB,GADAL,EAAMJ,EAAIS,QACJC,EAAmBN,GACxB,MAAM,IAAIE,UAAWC,EAAQ,kGAAmGH,SAE3H,GAAKI,UAAUC,OAAS,GAG9B,GADAN,EAAUD,GACJQ,EAFNN,EAAMH,GAGL,MAAM,IAAIK,UAAWC,EAAQ,4EAA6EH,SAErG,GAAKM,EAAmBT,GAC9BG,EAAMH,MACA,CAEN,GADAG,EAAMJ,EAAIS,QACJC,EAAmBN,GACxB,MAAM,IAAIE,UAAWC,EAAQ,kGAAmGH,IAEjID,EAAUF,CACV,CACD,OAAOU,EAAe,IAStB,SAASA,EAAeC,GACvB,OASA,SAAkBC,GACjB,IAAIC,EAAQF,EAAKG,QAEjB,GADAD,EAAME,KAAMH,GACPC,EAAML,OAASL,EACnB,OAAOO,EAAeG,GAEvB,OAAOd,EAAIiB,MAAOd,EAASW,EAC3B,CACD,CACF"}